#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var wrench = require('wrench');
var path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');

var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version,
    run = false;


// CLI

// before(program, 'outputHelp', function () {
//   this.allowUnknownOption();
// });

// program
//   .version(version)
//   .usage('<command> [options] [name]')
//   .command('app [name]', 'create a new app')
//   .command('cmp [name]', 'create a new component')
//   .option('-c, --coffee', 'use coffeescript')
//   .action(function(cmd, options) {
//     console.log('exec "%s" using %s mode', cmd, options.exec_mode);
//   })
//   .parse(process.argv);

program
  .usage('<command> [options] [name]')
  .command('app <name>')
  .option('-c, --coffee', 'use coffeescript')
  .description('create a new app')
  .action(function(name, options) {
    run = true;
    main('app', name, options && options.parent && options.parent.coffee);
  });

program
  .usage('<command> [options] <name>')
  .command('component <name>')
  .alias('cmp')
  .option('-c, --coffee', 'use coffeescript')
  .description('create a new component')
  .action(function(name, options) {
    run = true;
    main('cmp', name, options && options.parent && options.parent.coffee);
  });

program
  .option('-c, --coffee', 'use coffeescript');

program.parse(process.argv);

if (!run) {
  program.help();
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

function complete(path) {
  console.log();
  console.log('   install dependencies:');
  console.log('     $ cd %s && npm install', path);
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createComponent(app_name, path) {
  console.log();
  copydir('component', path);

  var files = [ 'index.js', 'index.coffee', 'index.html', 'index.styl', 'package.json', 'README.md' ];

  for (var i = 0; i < files.length; i++) {
    var file = files[i],
        f = loadFile(path + '/' + file).replace(new RegExp('{k-component}', 'g'), app_name);

    write(path + '/' + file, f);
  }

  write(path + '/.gitignore', fs.readFileSync(__dirname + '/../templates/gitignore', 'utf-8'));
}

function createApplication(app_name, path, lang) {
  console.log();

  // JavaScript
  var indexApp = loadTemplate(lang + '/src/app/index.' + lang),
      indexSrv = loadTemplate(lang + '/src/server/index.' + lang);

  copydir(lang, path);

  // Template support
  indexApp = indexApp.replace('{kantele-app}', app_name);
  indexSrv = indexSrv.replace('{kantele-app}', app_name);

  // package.json
  var pkg = {
      name: app_name
    , version: '0.0.0'
    , private: true
    , scripts: { start: lang === 'coffee'? './node_modules/coffee-script/bin/coffee server.coffee' : 'node server.js' }
    , dependencies: {
        "body-parser": "*",
        "coffee-script": "*",
        "coffeeify": "*",
        "compression": "*",
        "connect-redis": "*",
        "cookie-parser": "*",
        "express": "*",
        "express-session": "*",
        "k-before-unload": "*",
        "k-bundle": "*",
        "k-client": "*",
        "k-connection-alert": "*",
        "k-highway": "*",
        "k-html-util": "*",
        "k-model": "*",
        "k-parsing": "*",
        "k-saddle": "*",
        "k-serialize-object": "*",
        "k-stylus": "*",
        "k-templates": "*",
        "k-tracks": "*",
        "k-livedb-mongo": "*",
        "nib": "*",
        "redis": "*"          
    }
  }

  // sort dependencies like npm(1)
  pkg.dependencies = sortedObject(pkg.dependencies);

  // write files
  write(path + '/package.json', JSON.stringify(pkg, null, 2));
  write(path + '/src/app/index.' + lang, indexApp);
  write(path + '/src/server/index.' + lang, indexSrv);
  write(path + '/.gitignore', fs.readFileSync(__dirname + '/../templates/gitignore', 'utf-8'));

  complete(path);
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}


/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

/**
 * Load a  file.
 */

function loadFile(file) {
  return fs.readFileSync(file, 'utf-8');
}


/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 *
 * @param {String} from
 * @param {String} to
 * @param {Function} fn
 */

function copydir(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  var err = wrench.copyDirSyncRecursive(from, to);

  if (err) {
      console.log(err);
      process.exit(1);
  }

  console.log('   \x1b[36mcopy\x1b[0m : ' + from + ' to ' + to);
}

/**
 *
 * @param {String} path
 */

function exists(path) {
  try {
    var ok = !!fs.statSync(path);
  }
  catch (err) {
    return false;
  }

  return true;
}


/**
 * Main program.
 */

function main(cmd, appName, coffee) {
  // App name
  var destinationPath = path.resolve(cmd === 'app'? appName: './node_modules/' + appName),
      appBaseName = path.basename(appName);

  if (exists(destinationPath)) {
    console.error('The folder ' + destinationPath + ' seems to exist. Not good! Please move the folder away first or choose another name.');
    process.exit(1);
  }

  if (cmd === 'cmp') {
    if (appBaseName !== appName) {
      console.error('Component names can point to a specific folder - they can\'t have slashes in the name for example.');
      process.exit(1);
    }

    if (!exists('./node_modules')) {
      console.error('./node_modules does not exist! This should be run in the app\'s topmost (main) folder which contains server.js/server.coffee and ./node_modules');
      process.exit(1);
    }

    createComponent(appName, destinationPath);
  }
  else {
    createApplication(appBaseName, destinationPath, coffee? 'coffee': 'js');
  }
}
