#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var wrench = require('wrench');
var path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit

// CLI

before(program, 'outputHelp', function () {
  this.allowUnknownOption();
});

program
  .version(version)
  .usage('[options] [dir]')
  .option('-c, --coffee', 'use coffeescript')
  .option('-k, --component', 'create a component instead of an app')
  .option('    --git', 'add .gitignore')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(app_name, path) {
  var wait = 5;

  console.log();
  function complete() {
    if (--wait) return;
    console.log();
    console.log('   install dependencies:');
    console.log('     $ cd %s && npm install', path);
    console.log();
    console.log('   run the app:');
    console.log('     $ DEBUG=' + app_name + ':* ./bin/www');
    console.log();
  }

  // JavaScript
  var indexApp = loadTemplate(program.lang + '/src/app/index.' + program.lang),
      indexSrv = loadTemplate(program.lang + '/src/server/index.' + program.lang);

  copydir(program.lang, path);

  // Template support
  indexApp = indexApp.replace('{kantele-app}', app_name);
  indexSrv = indexSrv.replace('{kantele-app}', app_name);

  // package.json
  var pkg = {
      name: app_name
    , version: '0.0.0'
    , private: true
    , scripts: { start: program.lang === 'coffee'? './node_modules/coffee-script/bin/coffee server.coffee' : 'node server.js' }
    , dependencies: {
        "body-parser": "*",
        "coffee-script": "*",
        "coffeeify": "*",
        "compression": "*",
        "connect-redis": "*",
        "cookie-parser": "*",
        "express": "*",
        "express-session": "*",
        "k-before-unload": "*",
        "k-bundle": "*",
        "k-client": "*",
        "k-connection-alert": "*",
        "k-highway": "*",
        "k-html-util": "*",
        "k-model": "*",
        "k-parsing": "*",
        "k-saddle": "*",
        "k-serialize-object": "*",
        "k-stylus": "*",
        "k-templates": "*",
        "k-tracks": "*",
        "livedb-mongo": "*",
        "nib": "*",
        "redis": "*"          
    }
  }

  // sort dependencies like npm(1)
  pkg.dependencies = sortedObject(pkg.dependencies);

  // write files
  write(path + '/package.json', JSON.stringify(pkg, null, 2));
  write(path + '/src/app/index.' + program.lang, indexApp);
  write(path + '/src/server/index.' + program.lang, indexSrv);

  if (0 && program.git) {
    write(path + '/.gitignore', fs.readFileSync(__dirname + '/../templates/js/gitignore', 'utf-8'));
  }

  complete();
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

/**
 * Main program.
 */

function main() {
  // Path
  var destinationPath = program.args.shift() || '.';

  // App name
  var appName = path.basename(path.resolve(destinationPath));

  // Template engine
  program.lang = 'js';
  if (program.coffee) program.lang = 'coffee';

  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination (' + destinationPath + ') is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath);
        } else {
          console.error('aborting');
          exit(1);
        }
      });
    }
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 *
 * @param {String} from
 * @param {String} to
 * @param {Function} fn
 */

function copydir(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  console.log('   \x1b[36mcopy\x1b[0m : ' + from + ' to ' + to);
  wrench.copyDirSyncRecursive(from, to);
}

// Deep-copy an existing directory
